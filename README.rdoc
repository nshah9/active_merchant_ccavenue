= OffsitePaymentsCcavenue

CCAvenue integration for OffsitePayments.

== Installation

=== Requirements

You need to install the OffsitePayments gem or rails plugin. More info about OffsitePayments installation can be found at http://www.activemerchant.org/.

=== As a gem

Install the gem [recommended]:

  > sudo gem install active_merchant_ccavenue

To use the OffsitePaymentsCcavenue gem in a Rails application, add the following line in your environment.rb:

  config.gem 'active_merchant_ccavenue'

=== As a Rails plugin

To add OffsitePaymentsCcavenue as a plugin in a Rails application, run the following command in your application root:

  > ./script/plugin install git@github.com:meshbrain/active_merchant_ccavenue.git

== Configuration

Once you have a merchant account with CCAvenue, you need to generate your encryption key. This can be done in their 'Settings & Options -> Generate Working Key' page at the time of writing. Note them down and make sure your account is activated.

Then create an initializer, like initializers/payment.rb. Add the following lines:

  OffsitePayments::Billing::Integrations::Ccavenue.setup do |cca|
    cca.merchant_id = M_blahpache_5678 #your CCAvenue merchant id from the working key generation page
    cca.work_key = 6abc0ty90e0v7jk9hj #your CCAvenue working key
  end
  CCAVENUE_ACCOUNT = 'youraccountname'

If OffsitePayments's actionview helpers don't load automatically, add the line in your initializer:

  ActionView::Base.send :include, OffsitePayments::Billing::Integrations::ActionViewHelper

== Example Usage

Once you've configured OffsitePaymentsCcavenue, you need a checkout action; my view looks like:

  <% payment_service_for @order.order_id, CCAVENUE_ACCOUNT,
      :amount => @order.price,
      :currency => 'INR',
      :service => :ccavenue do |service| %>    
    <%  service.billing_address :name => @order.billing_address.name,
                         :email => @order.user.email,
                         :phone => @order.billing_address.phone,
                         :address    => @order.billing_address.address_line1 + ' ' + @order.billing_address.address_line2,
                         :city       => @order.billing_address.city,
                         :state      => @order.billing_address.state,
                         :country    => @order.billing_address.country,
                         :zip        => @order.billing_address.pincode
    %>

    <%  service.delivery_address(:name => @order.shipping_address.name,
                                :phone => @order.shipping_address.phone,
                                :address    => @order.shipping_address.address_line1 + ' ' + @order.shipping_address.address_line2,
                                :city       => @order.shipping_address.city,
                                :state      => @order.shipping_address.state,
                                :country    => @order.shipping_address.country,
                                :zip        => @order.shipping_address.pincode) unless @order.same_address
    %>
    <%  service.redirect :return_url => confirm_order_url(@order) %>
    <%= submit_tag 'Proceed to payment' %>
  <% end %>

You also need a return or confirmation action; my action looks like:

  @notification = OffsitePayments::Billing::Integrations::Ccavenue::Notification.new(params[:encResponse])
  if @notification.payment_id.present?
    @order = Order.find_by_order_id(@notification.payment_id)
    if @notification.complete? and @notification.valid? and @order.id == Order.find(@notification.payment_id).id  and @order.price == BigDecimal.new(@notification.gross)
      @order.confirm!
    else
      @order.reject!
    end
  end

== Copyright

Copyright (c) 2010 Suman Debnath. See LICENSE for details.
